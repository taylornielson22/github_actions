name: Demo

on:
  push:
   tags: [ 'qa-accept' ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is called "build"
  # test:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      python-version: ["3.8", "3.9", "3.10"]
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #        python-version: ${{ matrix.python-version }}
  #    - name: Install Python dependencies
  #      run: |
  #        echo Python Version: $(python -version)
  #        python -m pip install --upgrade pip
  #        python -m pip install pytest
  #    - name: Test
  #      run: pytest
  #lint:
  #  uses: taylornielson22/github_actions/.github/workflows/_linter.yml@main
  #  with:
  #        base_sha: ${{ github.event.pull_request.commits }}
  #       head_sha: ${{ github.event.pull_request.head.sha  }}
  #        black: false
  #        flake8: true
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Prep log
        run: |
          echo "VERSION = $(echo 3.1)" >> $GITHUB_ENV
          echo $VERSION
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v${{VERSION}}
          release_name: Release ${{VERSION }}
          body: Release ${{ env.VERSION }}
  merge:
    #needs: [update]
    # if: $${{ github.ref == 'refs/heads/mainy' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: prod
      - run: chmod +x .github/scripts/merge.sh
      - name: Run build script
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: sh .github/scripts/merge.sh
        shell: bash
 # comment:
  #  runs-on: ubuntu-latest
  #  needs: [lint, test]
   # steps:
     # - name: 'Comment on PR'
        # uses: actions/github-script@v3
        # with:
          # github-token: ${{ secrets.GITHUB_TOKEN}}
          # script: |
          #  await github.issues.createComment({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    issue_number: ${{ github.event.number }},
          #    body: 'Py Tests and Lint was successful!'
          #  });
