name: Demo


on: # yamllint disable-line rule:truthy
  push:
  pull_request:
    branches: [ 'main' ]
    types: [opened, reopened, synchronize]
 #   tags:
 #     - "qa-accept"
  # Allows you to run this workflow manually from the Actions tab
 # workflow_dispatch:
 #   inputs:
 #     branch:
 #       type: string
 #       required: true
 #       default: production

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is called "build"
  # test:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      python-version: ["3.8", "3.9", "3.10"]
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #        python-version: ${{ matrix.python-version }}
  #    - name: Install Python dependencies
  #      run: |
  #        echo Python Version: $(python -version)
  #        python -m pip install --upgrade pip
  #        python -m pip install pytest
  #    - name: Test
  #      run: pytest
  changed_docker_configs:
    runs-on: ubuntu-latest
    outputs:
      changed_configs: ${{ steps.configs.outputs.changed_configs}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        run: |
          CONFIGS=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} .github/*/_bump_version.yml) 
          echo $CONFIGS > configs.txt
          echo "CONFIGS=$(cat configs.txt)" >> $GITHUB_ENV
          echo "REQUIREMENTS=$(echo $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} .github/*/demo.yml))" >> $GITHUB_ENV
      - name: Check if requirements changed
        if:  "contains(env.REQUIREMENTS, 'demo') &&  !contains(env.CONFIGS, 'bump_version')"
        run: echo CONFIGS=$(echo $CONFIGS py38-cfl-pytest-container)" >> $GITHUB_ENV
      - name: Set changed_configs output
        id: configs
        run: echo "changed_configs=$(echo $CONFIGS)" >> $GITHUB_OUTPUT
  #bump_version:
  #  uses: taylornielson22/github_actions/.github/workflows/_bump_version.yml@main
  #  secrets: 
  #    GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  #    GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
    
  print:
    needs: changed_docker_configs
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ needs.changed_docker_configs.outputs.changed_configs }}'
     # - run: echo 'event ${{ toJSON(github.event) }}'
 # lint:
 #   uses: taylornielson22/github_actions/.github/workflows/_linter.yml@main
 #   with:
 #         base_sha: ${{ github.event.before }}
 #         head_sha: ${{ github.sha }}
 #         black: false
 #         flake8: true
          
  #create_release:
  #  runs-on: ubuntu-latest
   # steps:
  #    - uses: actions/checkout@v3
   #   - run: echo "VERSION=1.2.1" >> $GITHUB_ENV
   #   - name: "Create release"
   #     uses: "actions/github-script@v6"
   #     with:
   #       github-token: "${{ secrets.GITHUB_TOKEN }}"
    #      script: |
    #        const { repo, owner } = context.repo;
    #        github.rest.repos.createRelease({
   #           generate_release_notes: true,
   #           name: `Release ${process.env.VERSION}`,
  #            owner,
   #           repo,
   #           tag_name: `v${process.env.VERSION}`,
   #         });

 # comment:
  #  runs-on: ubuntu-latest
  #  needs: [lint, test]
   # steps:
     # - name: 'Comment on PR'
        # uses: actions/github-script@v3
        # with:
          # github-token: ${{ secrets.GITHUB_TOKEN}}
          # script: |
          #  await github.issues.createComment({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    issue_number: ${{ github.event.number }},
          #    body: 'Py Tests and Lint was successful!'
          #  });
