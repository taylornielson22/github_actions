name: Demo


on: # yamllint disable-line rule:truthy
  push:
  pull_request:
    branches: [ 'main' ]
    types: [opened, reopened, synchronize]
    
 #   tags:
 #     - "qa-accept"
  # Allows you to run this workflow manually from the Actions tab
 # workflow_dispatch:
 #   inputs:
 #     branch:
 #       type: string
 #       required: true
 #       default: production

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is called "build"
  # test:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      python-version: ["3.8", "3.9", "3.10"]
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #        python-version: ${{ matrix.python-version }}
  #    - name: Install Python dependencies
  #      run: |
  #        echo Python Version: $(python -version)
  #        python -m pip install --upgrade pip
  #        python -m pip install pytest
  #    - name: Test
  #      run: pytest
 # changed_docker_configs:
  #  runs-on: ubuntu-latest
  #  container:
   #   image: python:3.8-slim
   # outputs:
    #  matrix: ${{ steps.configs.outputs.matrix }}
   # steps:
    #  - run: apt-get update
   #   - run: apt-get install -y jq git
   #   - uses: actions/checkout@v3
   #     with:
   #       fetch-depth: 0
   #   - name: Get changed files
 #       run: |
  #        echo "CONFIGS=docker_configs/cfl_cicd/py38-cfl-pytest-container/Dockerfile " >> $GITHUB_ENV 
  #        echo "REQUIREMENTS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | tr '\n' ' ')" >> $GITHUB_ENV
      #- name: Check if requirements changed
     #   if:  "contains(env.REQUIREMENTS, 'demo') &&  !contains(env.CONFIGS, 'scripts')"
      #  run: echo "CONFIGS=$CONFIGS py38-cfl-pytest-container" >> $GITHUB_ENV
  #    - name: Set changed_configs output
  #      id: configs
  #      run: |
   #      CONFIGS="$(echo $CONFIGS | sed 's/\/Dockerfile//g')"
  #       CONFIGS="$(echo $CONFIGS | sed 's/docker_configs\/cfl_cicd\///g')"
  #       CONFIGS=$(echo $CONFIGS | jq -R -s -c 'split(" ")[:-1]')
  #       echo "matrix=$CONFIGS" >> $GITHUB_OUTPUT 
  #       echo "matrix=$CONFIGS" >> $GITHUB_OUTPUT 
  #    - run: echo "$matrix"
  #bump_version:
  #  uses: taylornielson22/github_actions/.github/workflows/_bump_version.yml@main
  #  secrets: 
  #    GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
  #    GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
 # lint:
 #   uses: taylornielson22/github_actions/.github/workflows/_linter.yml@main
 #   with:
 #         base_sha: ${{ github.event.before }}
 #         head_sha: ${{ github.sha }}
 #         black: false
 #         flake8: true
  package_info:
    runs-on: ubuntu-latest
    outputs:
      # jobs outputs include version of package in tagged commit (main)
      version: ${{ steps.release_version.outputs.version }}
      # jobs outputs include name of the library package 
      name:  ${{ steps.package.outputs.name }}
    steps:
      # Get Version that master currently is set to
      - run: echo "version=6.0.0" >> $GITHUB_OUTPUT
        id: release_version
      # Get python package name of library
      - run: echo "name=flake8" >> $GITHUB_OUTPUT
        id: package
  verify_version:
    needs: [ package_info ]
    runs-on: ubuntu-latest
    container:
      image: python:3.8-slim
      env: 
        # Used check if the package in docker container matches the 'version' output var from package_info job
        RELEASE_VERSION: ${{ needs.package_info.outputs.version }}
        # Package to verify version. PACKAGE_NAME is set to 'name' output var from the package_info job
        PACKAGE_NAME: ${{ needs.package_info.outputs.name }}
    steps:
      - run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
      - name: Get Package Version Installed on Image
        run: echo "VERSION="$(pip freeze | sed -n "s/^${PACKAGE_NAME}==//p")"" >> $GITHUB_ENV
      - name: Verify Version Matches New Released Version
        if: ${{ env.VERSION != env.RELEASE_VERSION }}
        run: echo "$PACKAGE_NAME ${{ env.VERSION }} is installed & does not match the latest version $RELEASE_VERSION" && exit 1
      - run: echo "Latest version $VERSION of $PACKAGE_NAME is installed!!"
      
  #create_release:
   # runs-on: ubuntu-latest
  #  steps:
     # - uses: actions/checkout@v3
    #  - run: echo "VERSION=2.3.3" >> $GITHUB_ENV
   #   - name: "Create release"
  #      uses: "actions/github-script@v6"
 #       with:
    #      github-token: "${{ secrets.GITHUB_TOKEN }}"
     #     script: |
  #          const { repo, owner } = context.repo;
   #         github.rest.repos.createRelease({
    #          generate_release_notes: true,
  #            name: `${process.env.VERSION}`,
   #           owner,
  #            repo,
 #             tag_name: `${process.env.VERSION}`,
#            });

 # comment:
  #  runs-on: ubuntu-latest
  #  needs: [lint, test]
   # steps:
     # - name: 'Comment on PR'
        # uses: actions/github-script@v3
        # with:
          # github-token: ${{ secrets.GITHUB_TOKEN}}
          # script: |
          #  await github.issues.createComment({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    issue_number: ${{ github.event.number }},
          #    body: 'Py Tests and Lint was successful!'
          #  });
