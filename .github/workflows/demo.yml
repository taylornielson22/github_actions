name: Demo

on: # yamllint disable-line rule:truthy
  pull_request:
    branches: [ 'main' ]

    types: [opened, reopened, synchronize]
 #   tags:
 #     - "qa-accept"
  # Allows you to run this workflow manually from the Actions tab
 # workflow_dispatch:
 #   inputs:
 #     branch:
 #       type: string
 #       required: true
 #       default: production

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is called "build"
  # test:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      python-version: ["3.8", "3.9", "3.10"]
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #        python-version: ${{ matrix.python-version }}
  #    - name: Install Python dependencies
  #      run: |
  #        echo Python Version: $(python -version)
  #        python -m pip install --upgrade pip
  #        python -m pip install pytest
  #    - name: Test
  #      run: pytest
  validate_pr_title1:
    env: 
      REGEX: ^\(TA\|ESS\|EIT\|DEVOPS\|AS\)-[0-9]{4,6}:.[A-Za-z]+.*$
      TITLE: ${{ github.event.pull_request.title }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          [[ $TITLE =~ $REGEX ]] && (echo "INVALID=false" >> $GITHUB_ENV) || (echo "INVALID=true" >> $GITHUB_ENV)
      - name: Leave comment to change title on PR
        uses: actions/github-script@v6
        env:
          RUN_LINK: ${{ github.event.pull_request.base.repo.html_url }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            if(process.env.INVALID == 'true'){
              await github.rest.issues.createComment({
                issue_number: ${{ github.event.number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                body:`Please **update PR Title** to match the following pattern: **{ticketID}: summary of change**
                  Example: *TA-12345: Update pytest to latest version*
                  \n
                  After updating PR title, navigate to [your workflow run](${process.env.RUN_LINK}) and click "Re-run jobs"`
              });
              core.setFailed("Invalid PR Title")
            }
  print:
    needs: validate_pr_title1
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ toJSON(github) }}'
      - run: echo 'base ref ${{ github.event.before }}'
      - run: echo 'head ref ${{ github.event.after }}'
      - run: echo 'sha ${{ github.sha }}'

  #lint:
  #  uses: taylornielson22/github_actions/.github/workflows/_linter.yml@main
  #  with:
  #        base_sha: ${{ github.event.before }}
  #        head_sha: ${{ github.sha }}
  #        black: false
  #        flake8: true
          
  #create_release:
  #  runs-on: ubuntu-latest
   # steps:
  #    - uses: actions/checkout@v3
   #   - run: echo "VERSION=1.2.1" >> $GITHUB_ENV
   #   - name: "Create release"
   #     uses: "actions/github-script@v6"
   #     with:
   #       github-token: "${{ secrets.GITHUB_TOKEN }}"
    #      script: |
    #        const { repo, owner } = context.repo;
    #        github.rest.repos.createRelease({
   #           generate_release_notes: true,
   #           name: `Release ${process.env.VERSION}`,
  #            owner,
   #           repo,
   #           tag_name: `v${process.env.VERSION}`,
   #         });

 # comment:
  #  runs-on: ubuntu-latest
  #  needs: [lint, test]
   # steps:
     # - name: 'Comment on PR'
        # uses: actions/github-script@v3
        # with:
          # github-token: ${{ secrets.GITHUB_TOKEN}}
          # script: |
          #  await github.issues.createComment({
          #    owner: context.repo.owner,
          #    repo: context.repo.repo,
          #    issue_number: ${{ github.event.number }},
          #    body: 'Py Tests and Lint was successful!'
          #  });
